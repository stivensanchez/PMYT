{"filter":false,"title":"users_controller.rb","tooltip":"/app/controllers/users_controller.rb","undoManager":{"mark":2,"position":2,"stack":[[{"group":"doc","deltas":[{"start":{"row":1,"column":1},"end":{"row":72,"column":7},"action":"remove","lines":[" before_action :set_user, only: [:show, :edit, :update, :destroy]","","  # GET /users","  # GET /users.json","  def index","    @users = User.all","  end","","  # GET /users/1","  # GET /users/1.json","  def show","  end","","  # GET /users/new","  def new","    @user = User.new","  end","","  # GET /users/1/edit","  def edit","  end","","  # POST /users","  # POST /users.json","  def create","    @user = User.new(user_params)","","    respond_to do |format|","      if @user.save","        format.html { redirect_to @user, notice: 'User was successfully created.' }","        format.json { render :show, status: :created, location: @user }","      else","        format.html { render :new }","        format.json { render json: @user.errors, status: :unprocessable_entity }","      end","    end","  end","","  # PATCH/PUT /users/1","  # PATCH/PUT /users/1.json","  def update","    respond_to do |format|","      if @user.update(user_params)","        format.html { redirect_to @user, notice: 'User was successfully updated.' }","        format.json { render :show, status: :ok, location: @user }","      else","        format.html { render :edit }","        format.json { render json: @user.errors, status: :unprocessable_entity }","      end","    end","  end","","  # DELETE /users/1","  # DELETE /users/1.json","  def destroy","    @user.destroy","    respond_to do |format|","      format.html { redirect_to users_url, notice: 'User was successfully destroyed.' }","      format.json { head :no_content }","    end","  end","","  private","    # Use callbacks to share common setup or constraints between actions.","    def set_user","      @user = User.find(params[:id])","    end","","    # Never trust parameters from the scary internet, only allow the white list through.","    def user_params","      params.require(:user).permit(:email, :crypted_password, :salt)","    end"]},{"start":{"row":1,"column":1},"end":{"row":60,"column":0},"action":"insert","lines":["before_action :set_user, only: [:show, :edit, :update, :destroy]","","  def index","\t@users = User.all","  end","","  def show","  end","","  def new","\t@user = User.new","  end","","  def edit","  end","","  def create","  \t@user = User.new(user_params)","  \trespond_to do |format|","    \tif @user.save","      \tformat.html { redirect_to @user, notice: 'User was successfully created.' }","      \tformat.json { render :show, status: :created, location: @user }","    \telse","      \tformat.html { render :new }","      \tformat.json { render json: @user.errors, status: :unprocessable_entity }","    \tend","  \tend","  end","","  def update","  \trespond_to do |format|","    \tif @user.update(user_params)","      \tformat.html { redirect_to @user, notice: 'User was successfully updated.' }","      \tformat.json { render :show, status: :ok, location: @user }","    \telse","      \tformat.html { render :edit }","      \tformat.json { render json: @user.errors, status: :unprocessable_entity }","    \tend","  \tend","  end","","  def destroy","\t@user.destroy","\trespond_to do |format|","  \tformat.html { redirect_to users_url, notice: 'User was successfully destroyed.' }","  \tformat.json { head :no_content }","\tend","  end","","  private","\t# Use callbacks to share common setup or constraints between actions.","\tdef set_user","  \t@user = User.find(params[:id])","\tend","","\t# Never trust parameters from the scary internet, only allow the white list through.","\tdef user_params","    \tparams.require(:user).permit(:email, :password, :password_confirmation)","\tend",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":1},"end":{"row":2,"column":0},"action":"insert","lines":["",""]},{"start":{"row":2,"column":0},"end":{"row":2,"column":1},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":1},"end":{"row":2,"column":0},"action":"insert","lines":["skip_before_filter :require_login, only: [:index, :new, :create]",""]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["skip_before_filter :require_login, only: [:index, :new, :create]",""]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":2,"column":0},"end":{"row":2,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1424898612673,"hash":"a82a1de4166fad543a57611b1c8baa6eb815af71"}